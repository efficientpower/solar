<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
       http://www.springframework.org/schema/beans/spring-beans-3.0.xsd   
       http://www.springframework.org/schema/tx 
       http://www.springframework.org/schema/tx/spring-tx-3.0.xsd"
	default-autowire="byName" default-lazy-init="false">

	<!-- MySQL数据源 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName">
			<value>${jdbc.driver}</value>
		</property>
		<property name="url">
			<value>${jdbc.url}</value>
		</property>
		<property name="username">
			<value>${jdbc.username}</value>
		</property>
		<property name="password">
			<value>${jdbc.password}</value>
		</property>
		<property name="maxActive">
			<value>20</value>
		</property>
		<property name="maxIdle">
			<value>3</value>
		</property>
		<property name="maxWait">
			<value>30000</value>
		</property>
		<property name="defaultAutoCommit">
			<value>true</value>
		</property>
		<property name="testOnBorrow">
			<value>true</value>
		</property>
		<property name="testWhileIdle">
			<value>true</value>
		</property>
		<property name="validationQuery">
			<value>select 1 ;</value>
		</property>
	</bean>
	<bean id="ibatisConfigClasspathResource" class="org.springframework.core.io.ClassPathResource">
		<constructor-arg>
			<value>mappings/sql-map-config.xml</value>
		</constructor-arg>
	</bean>
	<bean id="sqlMapClient" class="org.springframework.orm.ibatis.SqlMapClientFactoryBean">
		<property name="configLocation" ref="ibatisConfigClasspathResource" />
		<property name="dataSource" ref="dataSource" />
	</bean>
	<bean id="sqlMapClientTemplate" class=" org.springframework.orm.ibatis.SqlMapClientTemplate">
		<property name="sqlMapClient" ref="sqlMapClient" />
	</bean>
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource" />
	</bean>
    <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"> 
		<property name="dataSource" ref="dataSource"/> 
	</bean> 
	<!-- 注解支持的事务 -->
	<tx:annotation-driven transaction-manager="txManager" />
		
	<!-- MongoDB -->
	<bean id="mongodbUri" class="com.mongodb.MongoClientURI">
		<constructor-arg index="0" value="${mongo.url}" />
	</bean>
	<bean id="mongo" class="com.mongodb.MongoClient">
		<constructor-arg index="0" ref="mongodbUri" />
	</bean>
	<bean id="ipMorphiaBean" class="org.wjh.solar.morphia.IpMorphiaBean">
		<property name="mapPackage" value="org.wjh.solar.domain.mongo" />
		<property name="mongo" ref="mongo" />
		<property name="dbName" value="solar" />
	</bean>

	<!-- memcached 客户端 -->
	<bean id="memcachedClient" class="net.spy.memcached.spring.MemcachedClientFactoryBean">
		<property name="servers" value="${memcached_address_list}" />
		<property name="protocol" value="BINARY" />
		<property name="transcoder">
			<bean class="net.spy.memcached.transcoders.SerializingTranscoder">
				<property name="compressionThreshold" value="16384" />
			</bean>
		</property>
		<property name="maxReconnectDelay" value="60" />
		<property name="opTimeout" value="10000" />
		<property name="timeoutExceptionThreshold" value="900" />
		<property name="hashAlg">
			<value type="net.spy.memcached.DefaultHashAlgorithm">KETAMA_HASH</value>
		</property>
		<property name="locatorType" value="CONSISTENT" />
		<property name="failureMode" value="Redistribute" />
		<property name="useNagleAlgorithm" value="false" />
	</bean>
	
	<!-- Redis -->
	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxTotal" value="${redis.maxTotal}"/> 
        <property name="maxIdle" value="${redis.maxIdle}"/> 
        <property name="minIdle" value="${redis.minIdle}"/>
        <property name="maxWaitMillis" value="${redis.maxWaitMillis}"/>
        <property name="testOnBorrow" value="${redis.testOnBorrow}"/> 
        <property name="testOnReturn" value="${redis.testOnReturn}"/> 
        <property name="testWhileIdle" value="${redis.testWhileIdle}"/>
    </bean>
     <bean id="shardedJedisPool" class="redis.clients.jedis.ShardedJedisPool"  scope="singleton">
        <constructor-arg index="0" ref="jedisPoolConfig" />
        <constructor-arg index="1">
            <list>
                <bean class="redis.clients.jedis.JedisShardInfo">
                    <constructor-arg name="host" value="${redis.host}"/>
                    <constructor-arg name="port" value="${redis.port}"/>
                </bean>
            </list>
        </constructor-arg>
    </bean>
</beans>